"use strict";

exports.__esModule = true;
exports.writeDir = writeDir;
exports.writeDirSync = writeDirSync;

var _fs = require("fs");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function handleError(e) {
  if (e.code === "EEXIST") {
    return true;
  } else if (e.code === "ENOENT") {
    return false;
  } else {
    return undefined;
  }
}

function writeDir(_x, _x2) {
  return _writeDir.apply(this, arguments);
}

function _writeDir() {
  _writeDir = _asyncToGenerator(function* (path, options) {
    var _options$recursive2;

    if (options === void 0) {
      options = {};
    }

    return _fs.promises.mkdir(path, {
      recursive: (_options$recursive2 = options.recursive) != null ? _options$recursive2 : true
    }).then(function () {
      return true;
    })["catch"](function (e) {
      return handleError(e);
    });
  });
  return _writeDir.apply(this, arguments);
}

function writeDirSync(path, options) {
  if (options === void 0) {
    options = {};
  }

  try {
    var _options$recursive;

    (0, _fs.mkdirSync)(path, {
      recursive: (_options$recursive = options.recursive) != null ? _options$recursive : true
    });
    return true;
  } catch (e) {
    return handleError(e);
  }
}