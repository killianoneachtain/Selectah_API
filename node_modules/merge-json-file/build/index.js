"use strict";

exports.__esModule = true;
exports.mergeJSON = mergeJSON;
exports.mergeJSONSync = mergeJSONSync;

var _typesJson = require("types-json");

exports.JSONObject = _typesJson.JSONObject;

var _readJsonSafe = require("read-json-safe");

var _writeJsonSafe = require("write-json-safe");

exports.Options = _writeJsonSafe.Options;

var _deepmerge = _interopRequireDefault(require("deepmerge"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function mergeJSON(_x, _x2, _x3) {
  return _mergeJSON.apply(this, arguments);
}

function _mergeJSON() {
  _mergeJSON = _asyncToGenerator(function* (path, object, options) {
    return (0, _readJsonSafe.readJSONObject)(path).then(function (old) {
      if (old === void 0) {
        old = {};
      }

      var json = (0, _deepmerge["default"])(old, object);
      return (0, _writeJsonSafe.writeJSON)(path, json, options);
    });
  });
  return _mergeJSON.apply(this, arguments);
}

function mergeJSONSync(path, object, options) {
  var _readJSONObjectSync;

  var old = (_readJSONObjectSync = (0, _readJsonSafe.readJSONObjectSync)(path)) != null ? _readJSONObjectSync : {};
  var json = (0, _deepmerge["default"])(old, object);
  return (0, _writeJsonSafe.writeJSONSync)(path, json, options);
}