"use strict";

exports.__esModule = true;
exports.readJSON = readJSON;
exports.readJSONSync = readJSONSync;
exports.readJSONObject = readJSONObject;
exports.readJSONObjectSync = readJSONObjectSync;
exports.readJSONArray = readJSONArray;
exports.readJSONArraySync = readJSONArraySync;

var _readFileSafe = require("read-file-safe");

var _parseJsonObject = require("parse-json-object");

exports.JSONValue = _parseJsonObject.JSONValue;
exports.JSONObject = _parseJsonObject.JSONObject;
exports.JSONArray = _parseJsonObject.JSONArray;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function readJSON(_x) {
  return _readJSON.apply(this, arguments);
}

function _readJSON() {
  _readJSON = _asyncToGenerator(function* (path) {
    return (0, _readFileSafe.readFile)(path).then(function (text) {
      return (0, _parseJsonObject.parseJSONValue)(text);
    });
  });
  return _readJSON.apply(this, arguments);
}

function readJSONSync(path) {
  var text = (0, _readFileSafe.readFileSync)(path);
  return (0, _parseJsonObject.parseJSONValue)(text);
}

function readJSONObject(_x2) {
  return _readJSONObject.apply(this, arguments);
}

function _readJSONObject() {
  _readJSONObject = _asyncToGenerator(function* (path) {
    return (0, _readFileSafe.readFile)(path).then(function (text) {
      return (0, _parseJsonObject.parseJSONObject)(text);
    });
  });
  return _readJSONObject.apply(this, arguments);
}

function readJSONObjectSync(path) {
  var text = (0, _readFileSafe.readFileSync)(path);
  return (0, _parseJsonObject.parseJSONObject)(text);
}

function readJSONArray(_x3) {
  return _readJSONArray.apply(this, arguments);
}

function _readJSONArray() {
  _readJSONArray = _asyncToGenerator(function* (path) {
    return (0, _readFileSafe.readFile)(path).then(function (text) {
      return (0, _parseJsonObject.parseJSONArray)(text);
    });
  });
  return _readJSONArray.apply(this, arguments);
}

function readJSONArraySync(path) {
  var text = (0, _readFileSafe.readFileSync)(path);
  return (0, _parseJsonObject.parseJSONArray)(text);
}